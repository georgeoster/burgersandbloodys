<div class="container" [ngClass]="error ? 'hide' : 'show'">

      <div class="table">

      <div id="map" class="map"></div>

      <div class="details">

            <div class="row" [ngClass]="noPlace ? 'redOutline' : ''" >
                  <div class="label place">Place</div>
                  <div class="element">
                        <AutocompleteComponent id="Place" (setAddress)="getEstablishmentAddress($event)" adressType="establishment"></AutocompleteComponent>
                  </div>
            </div>

            <div class="row" *ngFor="let thing of thingsToRate"> 
                  <div class="label">{{thing}}</div>
                  <div class="stars"><app-rating [menuItem]="thing" (ratingClick)='ratingComponentClick($event)'></app-rating></div>
            </div>

            <div class="row">
                  <div class="label"><div class="word">Words</div></div>
                  <div class="element">
                        <textarea id="words" [(ngModel)]="words"></textarea>  
                  </div>
            </div>
  
      </div>

  </div>

  <div class="button">
    <app-button [title] = "'ADD RATING'" (emitter)="addButtonHandler($event)" ></app-button>
  </div>

</div>

<div class="error" [ngClass]="error ? 'show' : 'hide'"> 
      <h1>{{errorMessage}}</h1>
</div>


////////////////////////////////////////////////////////////////////////




.container {
    position: relative;
    top: 7em;
    width:90%;
    max-width: 56em;
    margin-right: auto;
    margin-left: auto;
    background-color: #273247;
    border-radius: 10px;
}

/* being table */
.table {
    width:auto;
    border-radius: 10px;
    border: 2px solid var(--buttonBackgroundColor);
    background-color: var(--buttonBackgroundColor);
    color: var(--textColor);
    position: relative;
   
    display: flex;
    flex-direction: row;
}

.map { 
    width: 40%; 
    margin:.5em;
    border-radius: .5em;
   }

/* being details */
.details {
    width: 60%;
}

/* begin row */
.row{
    width: 100%;
    padding: .2em;
    display: flex;
    flex-direction: row;
    font-size: 1.5em;
    position: relative;
}
.label {
    text-align: left;
    font-weight: normal !important;
    width: var(--labelWidth);
    min-width: var(--labelWidth);
}

.place{
    margin-top: .25em;
}
.element {
    width: calc(100% - var(--labelWidth));
    margin-left:.25em;
    border:0;
}
.element:focus{
    outline:0;
}

textarea {
    padding-left: .25em;
    margin-left:.5em;
    width:94%;
    height:5em;
    color:var(--textColor);
    background-color: #273247;
    border:none;
    font-size:.5em;
    border-radius: .5em;
    resize: none;
}
textarea:focus{
    outline: none;
}
/* end row */
/* end details */
/* end table */

.button {
    width:auto;
    margin-right: auto;
    margin-left: auto;
    position: relative;
    top:1em;
}

.error{
    color: var(--textColor);
    margin-right: auto;
    margin-left: auto;
    margin-top: 5em;
    text-align: center;
}
.hide{
    display:none;
}
.show{
    display: block;
}

.redOutline{
    border:1px solid red;
}


@media screen and (max-width: 800px) {

    .container {
        top:5em;
    }
    
    .table {
        width:auto;
        flex-direction: column-reverse;
    }


    .map { 
        width: 95%; 
        height:10em;
        margin-right: auto;
        margin-left: auto;
        margin-top: 0;
        margin-bottom: 1em;
    }
    
    .details {
        width: 96%;
        margin-right: auto;
        margin-left: auto;
    }
    textarea{
        width:97%;
    }
   
    
    
    
}





@media screen and (max-width: 640px) {
    
    .container {
        position: absolute;
        top: 6.5em;
        width:100%;
        margin-right: 0;
        margin-left: 0;
        background-color: var(--buttonBackgroundColor);
    }

    .button {
        width:95%;
        margin-right: auto;
        margin-left: auto;
    }

    textarea{
        width:94%;
    }


}


@media screen and (max-width: 380px) and (orientation: portrait) {
    .container {
        position: absolute;
        top: 6.5em;
        width:100%;
        margin-right: 0;
        margin-left: 0;
        background-color: var(--buttonBackgroundColor);
    }
    .row{
        font-size: 1.25em;
        --labelWidth:95px;
    }

  
}


///////////////////////////////////////////////////////////////////////////



import { Component, NgZone } from '@angular/core';
import * as firebase from 'firebase/app';
import {Router} from '@angular/router';

@Component({
  selector: 'app-add-rating',
  templateUrl: './add-rating.component.html',
  styleUrls: ['./add-rating.component.css']
})

export class AddRatingComponent{

  // google places variables 
  address: Object;
  establishmentAddress: Object;
  formattedEstablishmentAddress: string;
  phone: string;// not used anywhere, but i might want to add it later. 

  // database variables 
  firestore;
  brunchPlace:string;
  placeId:string;
  burgerRating:number;
  bloodyRating:number;
  bennyRating:number;
  beersRating:number;
  words:string;

  // map variable
  mapStyle;
  geocoder:google.maps.Geocoder;

  // list to repeat on 
  thingsToRate:['Burger','Benny','Bloody','Beers'];

  user;

  //error handling variables
  error:boolean=true;
  saveError:boolean;
  errorMessage:string;
  noPlace:boolean = false;

  constructor(public zone: NgZone, private router: Router) {

    firebase.auth().onAuthStateChanged( (user) => {
      if (user) { // user is signed in.
        this.user = user;
        this.error=false;
      } else { // user is NOT signed in.
        this.errorMessage = 'You must be signed in to leave a review.';
        this.error = true;
      }
    });

    this.thingsToRate=['Burger','Benny','Bloody','Beers'];
    
    this.firestore = firebase.firestore();

    this.geocoder = new google.maps.Geocoder();

    this.mapStyle = this.getMapStyle();

  }//end constructor

  ngAfterViewInit(){
    this.setMap('Philadelphia,PA',14);// initialize the map
  } // end ngAfterViewInit

  addButtonHandler(s){

    if ( this.brunchPlace === undefined ){
      this.noPlace = true;
      return null;
    }

    if (this.user) { // User is signed in. redundant, but a little extra security.

      
      try{
      this.firestore.collection("reviews").doc().set( 
        
        this.setReview()
        
        )
      .then( () => {// Document successfully written
          this.updateUsersOtherReviews();
          this.router.navigate(['/viewRatings']); 
      })
      .catch( (error) => {
         console.log('i think i see the problem. we are using console.error. derp');
         // console.error("Error writing document: ", error);
          
      });
    } catch(e){
      console.log('well, at least we are catching it now');
      console.log(e.message);
      console.log('code: '+e.code);
      this.errorMessage = 'There was a problem saving your rating:';
          this.errorMessage +=  e.message;
          this.error = true;
    }
    
    
    
    } else {// user is NOT signed in. again, redundant.
      this.error = true;
    }
  }

  ratingComponentClick(clickObj: any): void {
    
      if(clickObj.menuItem === 'Burger') this.burgerRating = clickObj.rating;
      if(clickObj.menuItem === 'Bloody') this.bloodyRating = clickObj.rating;
      if(clickObj.menuItem === 'Benny') this.bennyRating = clickObj.rating;
      if(clickObj.menuItem === 'Beers') this.beersRating = clickObj.rating;

  }


  //Utility Methods Below

  setReview(){
    console.log('the state of burgerRating is : ' +this.burgerRating);
    return {
      email: this.user.email,
      place: this.brunchPlace,
      placeId: this.placeId,
      burger: this.burgerRating === undefined ? '': this.burgerRating,
      benny: this.bennyRating === undefined ? '': this.bennyRating,
      bloody: this.bloodyRating === undefined ? '': this.bloodyRating,
      beers: this.beersRating === undefined ? '': this.beersRating,
      overallRating: this.getOverallRating(),
      displayName: this.user.displayName,
      words: this.words,
      reviewDate : this.getTodaysDate(),
      numberOfReviews : 1,
      userImageURL : this.user.photoURL
    };
  }

  updateUsersOtherReviews(){
    
    this.firestore.collection("reviews").where("email", "==", this.user.email )
    .get()
    .then(
      ( querySnapshot ) => {
        
        let numberOfReviews = querySnapshot.size;
        querySnapshot.forEach(
          (doc) => {
            this.firestore.collection("reviews").doc(doc.id).update({ numberOfReviews : querySnapshot.size, userImageURL : this.user.photoURL});
          }
        );

      }
    );
  }

  setMap( address:string, zoom:number ){ //utility method to set location and recenter map.
    this.geocoder.geocode( 
      { 'address': address}, 
      (results, status) => {
        var map = new google.maps.Map( 
          document.getElementById('map'), 
          {
            zoom: zoom, 
            center: results[0].geometry.location,
            disableDefaultUI: true,
            styles: this.mapStyle
            } 
          );
        new google.maps.Marker({ map: map, position: results[0].geometry.location });
        }
      );
    } 


  getEstablishmentAddress(place: object) {//called when google places component emits location

    // set map
    this.setMap(place['formatted_address'],15);

    this.brunchPlace = place['name'];
    this.placeId = place['place_id'];

    this.establishmentAddress = place['formatted_address'];
    this.phone = this.getPhone(place);
    this.formattedEstablishmentAddress = place['formatted_address'];
    this.zone.run(() => {
      this.formattedEstablishmentAddress = place['formatted_address'];
      this.phone = place['formatted_phone_number'];
    });
  }

  getAddrComponent(place, componentTemplate) {
    let result;

    for (let i = 0; i < place.address_components.length; i++) {
      const addressType = place.address_components[i].types[0];
      if (componentTemplate[addressType]) {
        result = place.address_components[i][componentTemplate[addressType]];
        return result;
      }
    }
    return;
  }

  getPhone(place) {
    const COMPONENT_TEMPLATE = { formatted_phone_number: 'formatted_phone_number' },
      phone = this.getAddrComponent(place, COMPONENT_TEMPLATE);
    return phone;
  }

  getOverallRating(){

    var numberOfRatings = 4;
    if ( this.burgerRating === undefined ) { this.burgerRating = 0; numberOfRatings--;}
    if ( this.bennyRating === undefined )  { this.bennyRating = 0;  numberOfRatings--;}
    if ( this.bloodyRating === undefined ) { this.bloodyRating = 0; numberOfRatings--;}
    if ( this.beersRating === undefined )  { this.beersRating = 0;  numberOfRatings--;}
    if ( this.words === undefined )  { this.words = ''; }

    var overallRating = (this.burgerRating+this.bennyRating+this.bloodyRating+this.beersRating)/numberOfRatings;
    return Math.round(overallRating);
  }

  getTodaysDate(){
    var today = new Date();
    var dd = today.getDate();
    var mm = today.getMonth()+1; //January is 0!
    var yyyy = today.getFullYear();
    return mm + '/' + dd + '/' + yyyy;
  }

  getMapStyle(){

    return [
      {elementType: 'geometry', stylers: [{color: '#242f3e'}]},
      {elementType: 'labels.text.stroke', stylers: [{color: '#242f3e'}]},
      {elementType: 'labels.text.fill', stylers: [{color: '#746855'}]},
      {
        featureType: 'administrative.locality',
        elementType: 'labels.text.fill',
        stylers: [{color: '#d59563'}]
      },
      {
        featureType: 'poi',
        elementType: 'labels.text.fill',
        stylers: [{color: '#d59563'}]
      },
      {
        featureType: 'poi.park',
        elementType: 'geometry',
        stylers: [{color: '#263c3f'}]
      },
      {
        featureType: 'poi.park',
        elementType: 'labels.text.fill',
        stylers: [{color: '#6b9a76'}]
      },
      {
        featureType: 'road',
        elementType: 'geometry',
        stylers: [{color: '#38414e'}]
      },
      {
        featureType: 'road',
        elementType: 'geometry.stroke',
        stylers: [{color: '#212a37'}]
      },
      {
        featureType: 'road',
        elementType: 'labels.text.fill',
        stylers: [{color: '#9ca5b3'}]
      },
      {
        featureType: 'road.highway',
        elementType: 'geometry',
        stylers: [{color: '#746855'}]
      },
      {
        featureType: 'road.highway',
        elementType: 'geometry.stroke',
        stylers: [{color: '#1f2835'}]
      },
      {
        featureType: 'road.highway',
        elementType: 'labels.text.fill',
        stylers: [{color: '#f3d19c'}]
      },
      {
        featureType: 'transit',
        elementType: 'geometry',
        stylers: [{color: '#2f3948'}]
      },
      {
        featureType: 'transit.station',
        elementType: 'labels.text.fill',
        stylers: [{color: '#d59563'}]
      },
      {
        featureType: 'water',
        elementType: 'geometry',
        stylers: [{color: '#17263c'}]
      },
      {
        featureType: 'water',
        elementType: 'labels.text.fill',
        stylers: [{color: '#515c6d'}]
      },
      {
        featureType: 'water',
        elementType: 'labels.text.stroke',
        stylers: [{color: '#17263c'}]
      }
    ];

  }


}


